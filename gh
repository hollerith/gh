#!/bin/bash

# Check if GITHUB_TOKEN is set in the environment
if [ -z "$GITHUB_TOKEN" ]; then
    echo "GITHUB_TOKEN is not set. Please set your GitHub token in the environment."
    exit 1
fi

# Function to clone a repository
gh_repo_clone() {
    git clone "$1"
}

# Function to create a new repository
gh_repo_create() {
    local repo_name="$1"
    local visibility="private"

    if [ "$2" == "--public" ]; then
        visibility="public"
    fi

    curl -H "Authorization: token $GITHUB_TOKEN" -X POST \
         -d "{\"name\":\"$repo_name\", \"private\":$([ "$visibility" == "private" ] && echo "true" || echo "false")}" \
         "https://api.github.com/user/repos"
}

# Function to check out a pull request
gh_pr_checkout() {
    git fetch origin pull/"$1"/head:pr-"$1"
    git checkout pr-"$1"
}

# Function to list pull requests
gh_pr_list() {
    curl -H "Authorization: token $GITHUB_TOKEN" "https://api.github.com/repos/$1/pulls"
}

# Function to view a pull request
gh_pr_view() {
    curl -H "Authorization: token $GITHUB_TOKEN" "https://api.github.com/repos/$1/pulls/$1"
}

# Function to create a pull request
gh_pr_create() {
    # Get current branch name
    local base_branch="$(git branch --show-current)"

    # Add all changes
    git add .

    # Commit with a message from the user
    echo "Enter your commit message:"
    read commit_message
    git commit -m "$commit_message"

    # Create and switch to a new branch
    echo "Enter your new branch name:"
    read new_branch_name
    git checkout -b "$new_branch_name"

    # Push the new branch
    git push -u origin "$new_branch_name"

    # Prompt for PR title and description
    echo "Enter the title for your PR:"
    read pr_title
    echo "Enter the description for your PR:"
    read pr_description

    # Create the pull request
    local repo_full_name="$(git config --get remote.origin.url | sed -e 's/.*:\/\/github.com\///' -e 's/\.git//')"
    curl -H "Authorization: token $GITHUB_TOKEN" -X POST \
         -d "{\"title\": \"$pr_title\", \"body\": \"$pr_description\", \"head\": \"$new_branch_name\", \"base\": \"$base_branch\"}" \
         "https://api.github.com/repos/$repo_full_name/pulls"
}

# Main
if [ "$1" == "repo" ] && [ "$2" == "clone" ]; then
    gh_repo_clone "$3"
elif [ "$1" == "repo" ] && [ "$2" == "create" ]; then
    gh_repo_create "$3" "$4"
elif [ "$1" == "pr" ] && [ "$2" == "checkout" ]; then
    gh_pr_checkout "$3"
elif [ "$1" == "pr" ] && [ "$2" == "list" ]; then
    gh_pr_list "$3"
elif [ "$1" == "pr" ] && [ "$2" == "view" ]; then
    gh_pr_view "$3"
elif [ "$1" == "pr" ] && [ "$2" == "create" ]; then
    gh_pr_create
else
    echo -e "\x1b[32m\nUsage:\x1b[0m\n"
    echo -e "  \x1b[33mgh repo clone <repository>\x1b[0m: Clones the specified repository."
    echo -e "  \x1b[33mgh repo create <name> [--public|--private]\x1b[0m: Creates a new repository."
    echo -e "  \x1b[33mgh pr checkout <pr-number>\x1b[0m: Checks out the branch associated with the given pull request number."
    echo -e "  \x1b[33mgh pr list <repository>\x1b[0m: Lists all pull requests for the specified repository."
    echo -e "  \x1b[33mgh pr view <repository> <pr-number>\x1b[0m: Displays details about a specific pull request."
    echo -e "  \x1b[33mgh pr create\x1b[0m: Creates a new pull request for the current branch.\n"
fi
